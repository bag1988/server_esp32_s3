
Для загрузки на устройство файлов (файлы должны находиться в папке "data") необходимо выполинть команду:
pio run --target uploadfs

// Доступные GPIO пины для ESP32-DevKitC-32
// GPIO 34-39 могут использоваться только как входы
// GPIO 6-11 обычно используются для подключения флеш-памяти и не рекомендуются для общего использования
// GPIO 0 имеет специальное назначение при загрузке (boot mode)
std::vector<GpioPin> availableGpio = {
    {2, "GPIO 2 (LED)"},
    {4, "GPIO 4"},
    {5, "GPIO 5"},
    {12, "GPIO 12"},
    {13, "GPIO 13"},
    {14, "GPIO 14"},
    {15, "GPIO 15"},
    {16, "GPIO 16"},
    {17, "GPIO 17"},
    {18, "GPIO 18"},
    {19, "GPIO 19"},
    {21, "GPIO 21"},
    {22, "GPIO 22"},
    {23, "GPIO 23"},
    {25, "GPIO 25"},
    {26, "GPIO 26"},
    {27, "GPIO 27"},
    {32, "GPIO 32"},
    {33, "GPIO 33"},
    {34, "GPIO 34 (только вход)"},
    {35, "GPIO 35 (только вход)"},
    {36, "GPIO 36 (только вход)"},
    {39, "GPIO 39 (только вход)"}};

// Список доступных GPIO для ESP32 UNO WROOM-1-N16R8
std::vector<GpioPin> availableGpio = {
    {2, "GPIO 2 (LED встроенный)"},
    {4, "GPIO 4"},
    {5, "GPIO 5"},
    {12, "GPIO 12 (MTDI)"},
    {13, "GPIO 13 (MTCK)"},
    {14, "GPIO 14 (MTMS)"},
    {15, "GPIO 15 (MTDO)"},
    {16, "GPIO 16 (RXD2)"},
    {17, "GPIO 17 (TXD2)"},
    {18, "GPIO 18 (VSPI CLK)"},
    {19, "GPIO 19 (VSPI MISO)"},
    {21, "GPIO 21 (I2C SDA)"},
    {22, "GPIO 22 (I2C SCL)"},
    {23, "GPIO 23 (VSPI MOSI)"},
    {25, "GPIO 25 (DAC1)"},
    {26, "GPIO 26 (DAC2)"},
    {27, "GPIO 27"},
    {32, "GPIO 32 (ADC1_4)"},
    {33, "GPIO 33 (ADC1_5)"},
    {34, "GPIO 34 (ADC1_6, только вход)"},
    {35, "GPIO 35 (ADC1_7, только вход)"},
    {36, "GPIO 36 (ADC1_0, только вход)"},
    {39, "GPIO 39 (ADC1_3, только вход)"}
};
Важные замечания по GPIO для ESP32 UNO WROOM-1-N16R8:
Пины только для входа (Input Only):

GPIO 34, 35, 36, 39 могут использоваться только как входы и не имеют внутренних подтягивающих резисторов.
Пины, которые следует избегать:

GPIO 0: используется для загрузки в режим прошивки (boot mode)
GPIO 1 и 3: используются для UART0 (последовательный порт)
GPIO 6-11: обычно подключены к SPI флеш-памяти
Пины с особыми функциями:

GPIO 2: подключен к встроенному светодиоду на большинстве плат
GPIO 12: может вызвать проблемы при загрузке, если подтянут к HIGH
GPIO 15: может вызвать проблемы при загрузке, если подтянут к HIGH
Рекомендуемые пины для управления нагрузкой:

GPIO 25, 26, 27, 32, 33: наиболее безопасные пины для управления внешними устройствами
GPIO 4, 5, 18, 19, 21, 22, 23: также хорошо подходят для управления

This directory is intended for project specific (private) libraries.
PlatformIO will compile them to static libraries and link into the executable file.

The source code of each library should be placed in a separate directory
("lib/your_library_name/[Code]").

# Name,   Type, SubType, Offset,  Size, Flags
nvs,      data, nvs,     0x9000,  0x6000,
phy_init, data, phy,     0xf000,  0x1000,
factory,  app,  factory, 0x10000, 3M,
spiffs,   data, spiffs,  0x310000,12M,
Объяснение разделов
nvs (Non-Volatile Storage) - 24 КБ

Используется для хранения настроек Wi-Fi, Bluetooth и других системных параметров
phy_init - 4 КБ

Данные калибровки для радиочастотного модуля
factory - 3 МБ

Основной раздел для вашего приложения (прошивки)
3 МБ достаточно для большинства сложных приложений
spiffs - 12 МБ

Файловая система для хранения веб-страниц, конфигурационных файлов и других данных
Большой размер позволяет хранить много файлов и данных


# Name,   Type, SubType, Offset,  Size, Flags
nvs,      data, nvs,     0x9000,  0x6000,
phy_init, data, phy,     0xf000,  0x1000,
factory,  app,  factory, 0x10000, 2M,
otadata,  data, ota,     0x210000,0x2000,
ota_0,    app,  ota_0,   0x220000,2M,
ota_1,    app,  ota_1,   0x420000,2M,
spiffs,   data, spiffs,  0x620000,10M,

Этот вариант разделяет память на:

2 МБ для основного приложения
2 МБ для OTA слота 0
2 МБ для OTA слота 1
10 МБ для файловой системы SPIFFS


For example, see the structure of the following example libraries `Foo` and `Bar`:

|--lib
|  |
|  |--Bar
|  |  |--docs
|  |  |--examples
|  |  |--src
|  |     |- Bar.c
|  |     |- Bar.h
|  |  |- library.json (optional. for custom build options, etc) https://docs.platformio.org/page/librarymanager/config.html
|  |
|  |--Foo
|  |  |- Foo.c
|  |  |- Foo.h
|  |
|  |- README --> THIS FILE
|
|- platformio.ini
|--src
   |- main.c

Example contents of `src/main.c` using Foo and Bar:
```
#include <Foo.h>
#include <Bar.h>

int main (void)
{
  ...
}

```

The PlatformIO Library Dependency Finder will find automatically dependent
libraries by scanning project source files.

More information about PlatformIO Library Dependency Finder
- https://docs.platformio.org/page/librarymanager/ldf.html
